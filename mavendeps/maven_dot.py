#!/usr/bin/env python

from pydot import *

from maven_graph import *

__author__ = 'Tony Ganchev'


def artifact_label(artifact_id):
    packaging = artifact_id.packaging if artifact_id.classifier is None else '{}\n{}'.format(artifact_id.packaging,
                                                                                             artifact_id.classifier)
    return '{}\n{}\n{}\n{}'.format(artifact_id.group_id, artifact_id.artifact_id, packaging, artifact_id.version)


LABEL_REGEX = re.compile(
    r'"(?P<group_id>[^\\]+)\\n(?P<artifact_id>[^\\]+)((\\n(?P<packaging>[^\:\\]+))(\:(?P<classifier>[^\\]+))?)?\\n(?P<version>[^\\]+)"')


def parse_artifact_descriptor(label):
    """
    Parses the label of a GraphViz node generated by maven graph plugin and creates an ArtifactId based on the values.
    """
    m = LABEL_REGEX.match(label)
    if not m:
        raise AssertionError('Unexpected Maven artifact descriptor: ' + label)

    group_id = m.group('group_id')
    artifact_id = m.group('artifact_id')
    version = m.group('version')
    packaging = m.group('packaging') if m.group('packaging') else 'jar'
    classifier = m.group('classifier')

    return ArtifactDescriptor(group_id, artifact_id, version, packaging, classifier)


def graph_node():
    node = Node('graph')
    node.set('rankdir', 'LR')
    return node


def default_node():
    node = Node('node')
    node.set_shape('rect')
    # node.add_style('solid')
    node.add_style('filled')
    node.set_fontname('Tahoma')
    node.set_fontsize(10)
    return node


def edge_node():
    node = Node('edge')
    node.set_fontname('Tahoma')
    node.set_fontsize(10)
    return node


def node_id(artifact_id):
    return '"' + str(artifact_id) + '"'


def parse_dot_graph(source_file):
    with open(source_file, 'r') as f:
        data = f.read()
    graph = dot_parser.parse_dot_data(data)
    return graph


SCOPE_WEIGHTS = {
    'test': 0,
    'runtime': 1,
    'system': 3,
    'provided': 2,
    'compile': 4,
    'rsl': 1
}


def stronger_scope(lhs, rhs):
    return lhs if SCOPE_WEIGHTS[lhs] > SCOPE_WEIGHTS[rhs] else rhs


def dot_to_maven_graph(in_graph):
    artifacts_by_descriptor = {}
    old_to_new_nodes = {}

    for node in in_graph.get_nodes():
        node_name = node.get_name()
        if node_name not in ('graph', 'node', 'edge'):
            node_label = node.get_label()
            descriptor = parse_artifact_descriptor(node_label)
            in_reactor = node.get_fillcolor() == '"#dddddd"'
            artifact = Artifact(descriptor, in_reactor)
            artifacts_by_descriptor[descriptor] = artifact
            old_to_new_nodes[node_name] = descriptor

    dependencies = {}
    for edge in in_graph.get_edges():
        label = edge.get_label()[1:-1]

        scope = 'compile' if label == '' else label

        source = old_to_new_nodes[edge.get_source()]
        destination = old_to_new_nodes[edge.get_destination()]

        if source not in dependencies:
            dependencies[source] = {}
        if destination not in dependencies[source]:
            dependencies[source][destination] = scope
        else:
            dependencies[source][destination] = stronger_scope(
                dependencies[source][destination], scope)

    for source, sd in dependencies.iteritems():
        for destination, scope in sd.iteritems():
            artifacts_by_descriptor[source].add_dependency(
                ArtifactDependency(artifacts_by_descriptor[destination]))

    return [a for _, a in artifacts_by_descriptor.iteritems()]


def apply_style_functions(artifact, node, style_functions):
    for style_function in style_functions:
        style_function(artifact, node)


def maven_to_dot_graph(in_artifacts, style_functions):
    graph = Dot()
    graph.add_node(graph_node())
    graph.add_node(default_node())
    graph.add_node(edge_node())

    artifacts = {a.descriptor: a for a in in_artifacts}
    for _, artifact in artifacts.iteritems():
        node = Node(node_id(artifact.descriptor))
        node.set_label(artifact_label(artifact.descriptor))
        apply_style_functions(artifact, node, style_functions)
        graph.add_node(node)
    for _, artifact in artifacts.iteritems():
        for dep in artifact.dependencies:
            edge = Edge(node_id(artifact.descriptor), node_id(dep.artifact.descriptor))
            if dep.scope != 'compile':
                edge.set_label(dep.scope)
            graph.add_edge(edge)
    return graph


